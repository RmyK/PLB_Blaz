@page "/old"

@using ToDoListBlazor.Components.Demos

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<FoobarComponent />
<Foobar2Component></Foobar2Component>
<DisplayStringComponent MaString="Hello, je suis une nouvelle chaine de charactères"></DisplayStringComponent>

<div class="d-flex flex-column">
    <div>
        <input @bind-value=messageToDisplay></input>
        <button @onclick=DisplayMessage>Afficher message</button>
    </div>
    @if (isOk)
    {
        <span>Vous êtes d'accord</span>
    }
    else
    {
        <span>Vous N'êtes PAS d'accord</span>
    }

    <button @onclick=GetData>GetData</button>
    <span>@jsValue</span>
    <button @onclick=SetToREd>Set to Red</button>
    <div @ref=redDiv style="background-color:blue;width:50px;height:50px;"></div>
</div>


@code {
    [Inject] IJSRuntime JS { get; set; }
    private string messageToDisplay;

    private bool isOk;

    private string jsValue;
    private ElementReference redDiv;

    private async void DisplayMessage()
    {
        var res = await JS.InvokeAsync<bool>("displaymessage", messageToDisplay);
        isOk = res;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async void AddText(string value)
    {
        jsValue = value;
        await InvokeAsync(StateHasChanged);
    }

    public async void GetData()
    {
        var dotNetObject = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("getdata", dotNetObject);
    }

    public async void SetToREd()
    {
        await JS.InvokeVoidAsync("changecolor", redDiv, "red");
    }
}